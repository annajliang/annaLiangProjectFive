{"version":3,"sources":["assets/nounRedo.svg","assets/nounSave.svg","assets/nounNext.svg","components/ScrollToTop.js","components/Navbar.js","components/Header.js","components/ColorButton.js","components/ClearButton.js","components/SaveButton.js","components/NextWordButton.js","components/Buttons.js","components/HowToPlay.js","data/words.js","firebase.js","data/forbiddenColors.js","components/Canvas.js","components/Footer.js","components/Guess.js","components/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ScrollToTop","prevProps","this","props","location","pathname","window","scrollTo","React","Component","withRouter","Navbar","instructionsModal","swal","className","aria-hidden","to","onClick","randomDrawingObj","drawingId","Header","getRandomId","ColorButton","getHexColor","e","hexColor","currentTarget","value","aria-label","htmlFor","name","id","type","onChange","ClearButton","src","clear","alt","SaveButton","save","NextWordButton","next","Buttons","colorFn","clearFn","nextWordFn","saveFn","HowToPlay","words","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","forbiddenColors","Canvas","startDrawing","isDrawing","draw","ctx","lineTo","nativeEvent","offsetX","offsetY","stroke","beginPath","moveTo","stopDrawing","changeColor","selectedColor","indexOf","strokeStyle","setState","showModal","modalText","modalHeader","clearCanvas","clearRect","nextWord","drawingWord","getRandomWord","array","Math","floor","random","length","saveDrawing","drawingUrl","canvas","current","toDataURL","state","dbRef","database","ref","isCanvasBlank","push","Uint32Array","getImageData","width","height","data","buffer","some","color","createRef","getContext","lineWidth","lineJoin","lineCap","show","title","text","onConfirm","onMouseDown","onMouseMove","onMouseUp","Footer","Guess","checkUserInput","preventDefault","alteredUserInput","userInput","alteredCorrectGuess","correctGuess","toLowerCase","replace","guessModal","Swal","fire","getUserInput","target","setMatchingImgAndWord","drawingsArray","findCorrectDrawingObj","filter","drawing","match","params","imgId","drawings","action","onSubmit","Gallery","map","key","App","setInitialRandomDrawingObj","getRandomArrayItem","setRandomIdStr","undefined","on","snapshot","dbData","val","drawingsArrayFromDb","exact","path","component","render","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98c9b8fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nounRedo.29731122.svg\";","module.exports = __webpack_public_path__ + \"static/media/nounSave.ad82d4d9.svg\";","module.exports = __webpack_public_path__ + \"static/media/nounNext.3384c7b3.svg\";","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ScrollToTop extends React.Component {\n    // takes the previous prop's pathname as an argument and compares it to the current prop's pathname and if they do not match, then the window is automatically scrolled to the top of the page on every render  \n    componentDidUpdate(prevProps) {\n        if (this.props.location.pathname !== prevProps.location.pathname) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default withRouter(ScrollToTop);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport swal from \"@sweetalert/with-react\";\n\nclass Navbar extends Component {\n    // instructionsModal only appears on smaller screen widths\n    instructionsModal = () => {\n        swal(\n          <ul className=\"howToPlayModal\">\n            <h4>How to play</h4>\n            <li>Draw the word that appears at the very top of the canvas.</li>\n            <li>\n              Use the buttons on the far left to change colors, clear the\n              canvas or get a different word to draw.\n            </li>\n            <li>\n              Once you're ready, click save to post it to the gallery and share\n              it with the entire world.\n            </li>\n            <li>\n              Click gallery to see what other users drew or click guess to get a\n              random drawing chosen for you.\n            </li>\n          </ul>\n        );\n    }\n\n    render() {\n        return (\n            <>\n                <nav>\n                    <h1>Draw It</h1>\n                    <span aria-hidden=\"true\" className=\"divider\">|</span>\n                    <ul className=\"navbarLinks\">\n                        <li>\n                            <Link to=\"/\">Home</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/\" className=\"instructionsLink\" onClick={this.instructionsModal}>Instructions</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/gallery\">Gallery</Link>\n                        </li>\n                        <li>\n                            <Link to={`/guess/${this.props.randomDrawingObj.drawingId}`} onClick={this.props.onClick}>Guess</Link>\n                        </li>\n                    </ul>\n                </nav>\n            </>\n        );\n    }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport Navbar from \"./Navbar\";\n\nclass Header extends Component {\n    render() {\n        return(\n            <header>\n                <div className=\"navbarContainer wrapper\">\n                    {/* props from App.js being passed to Header.js and then to Navbar.js */}\n                    <Navbar randomDrawingObj={this.props.randomDrawingObj} onClick={this.props.getRandomId}/>\n                </div>\n            </header>         \n        )\n    }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass ColorButton extends Component {\n  // function that gets the hexcolor from the type of color attribute of the input element\n  getHexColor = (e) => {\n    const hexColor = e.currentTarget.value;\n    // variable is passed back up from ColorButton.js -> Buttons.js -> Canvas.js\n    this.props.onClick(hexColor);\n  };\n\n  render() {\n    return (\n      // calls the changeColor function that lives in the parent component Canvas.js\n      <button onClick={this.props.onClick} className=\"canvasButton\" aria-label=\"change color\">\n        <span className=\"showText\">\n          <label htmlFor=\"colorSelection\">\n            Color<span aria-hidden=\"true\">&ensp;|&ensp;</span>\n          </label>\n          <input\n            name=\"colorSelection\"\n            id=\"colorSelection\"\n            type=\"color\"\n            className=\"colorSelection\"\n            // input element listens for a change\n            onChange={this.getHexColor}\n          />\n        </span>\n      </button>\n    );\n  }\n}\n\nexport default ColorButton;\n","import React from \"react\";\nimport clear from \"../assets/nounRedo.svg\";\n\n// receive props from parent Buttons.js component (which Buttons.js receives from Canvas.js)\nconst ClearButton = (props) => {\n    return (\n      // calls the clearCanvas function that lives in the parent component Canvas.js\n      <button onClick={props.onClick} className=\"canvasButton\" aria-label=\"clear canvas\">\n        <span className=\"showText\">\n          Clear<span aria-hidden=\"true\">&ensp;|&ensp;</span>\n          {/* clear by Mert Güler from the Noun Project */}\n          <img src={clear} alt=\"\" className=\"clearImg\"></img>\n        </span>\n      </button>\n    );\n};\n\nexport default ClearButton;\n","import React from \"react\";\nimport save from \"../assets/nounSave.svg\";\n\n// receive props from parent Buttons.js component (which Buttons.js receives from Canvas.js)\nconst SaveButton = (props) => {\n  return (\n    // calls the saveDrawing function that lives in the parent component Canvas.js\n    <button onClick={props.onClick} className=\"canvasButton\" aria-label=\"change color\">\n      <span className=\"showText\">\n        Save<span aria-hidden=\"true\">&ensp;|&ensp;</span>\n        {/* Save by Kevin White from the Noun Project */}\n        <img src={save} alt=\"\"></img>\n      </span>\n    </button>\n  );\n};\n\nexport default SaveButton;\n","import React from \"react\";\nimport next from \"../assets/nounNext.svg\";\n\n// receive props from parent Buttons.js component (which Buttons.js receives from Canvas.js)\nconst NextWordButton = (props) => {\n    return (\n      // calls the nextWord function that lives in the parent component Canvas.js\n      <button onClick={props.onClick} className=\"canvasButton\" aria-label=\"get next drawing word\">\n        <span className=\"showText\">\n          Next<span aria-hidden=\"true\">&ensp;|&ensp;</span>\n          {/* Next by Deemak Daksina from the Noun Project */}\n          <img src={next} alt=\"\" className=\"nextImg\"></img>\n        </span>\n      </button>\n    );\n};\n\nexport default NextWordButton;\n","import React from \"react\";\nimport ColorButton from \"./ColorButton\";\nimport ClearButton from \"./ClearButton\";\nimport SaveButton from \"./SaveButton\";\nimport NextWordButton from \"./NextWordButton\";\n\nconst Buttons = (props) => {\n    return (\n        <div className=\"buttonContainer\">\n            {/* function props that are passed from the parent component of Canvas.js to its child \n            Buttons.js and then to each of Buttons.js' respective child components */}\n            <ColorButton onClick={props.colorFn} />\n            <ClearButton onClick={props.clearFn} />\n            <NextWordButton onClick={props.nextWordFn} />\n            <SaveButton onClick={props.saveFn} />\n        </div>\n    );\n};\n\nexport default Buttons;\n","import React from 'react';\n\nconst HowToPlay = () => {\n    return (\n        <ul className=\"howToPlay\">\n            <h4>How to play</h4>\n            <li>Draw the word that appears at the very top of the canvas.</li>\n            <li>Use the buttons on the far left to change colors, clear the canvas or get a new word to draw.</li>\n            <li>Once you're ready, click save to post it to the gallery.</li>\n            <li>Click gallery to see what other users drew or click guess to get a random drawing chosen for you.</li>\n        </ul>\n    )    \n}\n\nexport default HowToPlay;","const words = [\"dignity\", \"lady bug\", \"lamp\", \"brain\", \"computer\", \"owl\", \"facebook\", \"zombie\", \"eel\", \"stairs\", \"pirate\", \"space\", \"cucumber\", \"mask\", \"kiss\", \"mermaid\", \"tire\", \"rainbow\", \"giraffe\", \"eiffel tower\", \"twitter\", \"junk mail\", \"north pole\", \"ferris wheel\", \"selfie\", \"bikini\", \"angry\", \"hat\", \"bottle\", \"cup\", \"foot\", \"music\", \"mouse\", \"safe\", \"bed\", \"pillow\", \"helmet\", \"chicken\", \"exercise\", \"beard\", \"hoodie\", \"coffee\", \"cannonball\", \"pool\", \"eggplant\", \"escape room\", \"beer\", \"spoon\", \"video games\", \"knife\", \"gun\", \"rocket\", \"quarantine\", \"virus\", \"lemonade\", \"frog\", \"stockings\", \"high heels\", \"garbage can\", \"bubble gum\", \"cabin\", \"canoe\", \"ocean\", \"castle\", \"mountain\", \"life\", \"death\", \"board game\", \"monopoly\", \"capitalism\"];\n\nexport default words;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDJMPBCvkt5jm42SNAKITYsqY9VuKJgZ0k\",\n  authDomain: \"drawitreact.firebaseapp.com\",\n  databaseURL: \"https://drawitreact.firebaseio.com\",\n  projectId: \"drawitreact\",\n  storageBucket: \"drawitreact.appspot.com\",\n  messagingSenderId: \"1045921778796\",\n  appId: \"1:1045921778796:web:794f48bdd9dd8474cc5c49\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","const forbiddenColors = [\"#ffffff\", \"#fffffe\", \"#fffffd\", \"#fffffc\", \"#fffffa\", \"#fffff8\", \"#fffff7\", \"#fffff6\", \"#fffff5\", \"#fffff3\", \"#fffff2\", \"#fffff1\", \"#fffff0\", \"#feffff\", \"#fdffff\", \"#fcffff\", \"#fbffff\", \"#faffff\", \"#f9ffff\", \"#f8ffff\", \"#f7ffff\", \"#f6ffff\", \"#f5ffff\", \"#f4ffff\", \"#f3ffff\", \"#f2ffff\", \"#f1ffff\", \"#f0ffff\", \"#fffeff\", \"#fffdff\", \"#fffcff\", \"#fffbff\", \"#fffaff\", \"#fdfdfd\", \"#fcfcfc\", \"#fefefe\", \"#fbfbfb\", \"##f9f9f9\", \"#fefeff\", \"#fefdff\", \"#fefcff\", \"#fefbff\", \"#fefaff\", \"#fefffe\", \"#fefffd\", \"#fefffc\", \"#fefffb\", \"#fefffa\", \"#fefff9\", \"#fefff8\", \"#fefff7\", \"#fefff6\", \"#fefff5\", \"#fefff4\", \"#fefff3\", \"#fefff2\", \"#fefff1\", \"#fefff0\", \"#feffef\", \"#fcfffe\", \"#fdfffe\", \"##fbfffe\", \"##fafffe\", \"#f9fffe\", \"#f8fffe\", \"#f7fffe\", \"#f6fffe\", \"#f5fffe\", \"#f4fffe\", \"#f3fffe\", \"#fefefd\", \"#fefdfd\", \"#fefcfd\", \"#fdfcfd\", \"#fdfcfc\", \"#fcfbfc\", \"#fcfbfb\", \"#fbfafb\", \"#fafafb\", \"#fafafa\", \"#fafaf9\", \"#fafaf8\", \"#fafaf7\", \"#fafaf6\", \"#fafaf5\", \"#fafaf4\", \"#fafaf3\", \"#fafaf2\", \"#fafaf1\", \"#fafaf0\", \"#ffffef\", \"#ffffee\", \"#ffffed\", \"#ffffec\", \"#ffffeb\", \"#ffffea\", \"#ffffe9\", \"#ffffe8\", \"#ffffe7\", \"#ffffe6\", \"#fdfffa\", \"#fdfffd\", \"#fdfdfe\", \"#fffdfd\", \"#fffafd\", \"#fdfefd\", \"#fdfdff\", \"#fafdff\", \"#fafdfc\", \"#fcfcfe\", \"#fcfefd\", \"#fffffb\", \"#f9f9f9\", \"#fcfdfe\", \"fcfbff\", \"#fefefb\", \"#fdfafc\", \"#fafcff\", \"#fffcf9\", \"#fafbff\", \"#fffefc\", \"#fcfbfd\", \"#fcfef9\", \"#fffbfb\", \"#fdfcff\", \"#fcfbff\", \"#fefdfe\", \"#fffef8\", \"#fcfef8\", \"#fcfdf8\", \"#fcfcf8\", \"#fbfafb\", \"#fcfdff\", \"#fcfcfd\", \"#fefdfa\", \"#fefbfc\", \"#fcfdfc\", \"#faf9f8\", \"#fbfdff\", \"#fbfeff\", \"#f8feff\"];\n\nexport default forbiddenColors;","import React, { Component } from 'react';\nimport Buttons from './Buttons';\nimport HowToPlay from './HowToPlay';\nimport words from '../data/words';\nimport firebase from \"../firebase\";\nimport SweetAlert from \"sweetalert2-react\";\nimport forbiddenColors from '../data/forbiddenColors';\n\n// thank you Dev Ed @ youtube.com/channel/UClb90NQQcskPUGDIXsQEz5Q for your tutorial on HTML5 Canvas \n\nclass Canvas extends Component {\n  constructor() {\n    super();\n    // canvas element is an uncontrolled component so it handles updating the DOM for you (no need for it to be in state)\n    this.isDrawing = false;\n    // using ref to access the canvas element created in the render method\n    // find the canvas element save it to a variable\n    this.canvas = React.createRef();\n    // inital states\n    this.state = {\n      drawingWord: \"\",\n      showModal: false,\n      modalText: \"\",\n      modalHeader: \"\",\n    };\n  }\n\n  // only runs once after the render\n  componentDidMount() {\n    // setup canvas for drawing\n    // this is what we’ll actually be drawing on\n    this.ctx = this.canvas.current.getContext(\"2d\");\n\n    // default color of line\n    this.ctx.strokeStyle = \"#000\";\n\n    // width of the line\n    this.ctx.lineWidth = 7;\n\n    // ensures that we get a smooth drawing rather than a squared-off edge by default\n    this.ctx.lineJoin = \"round\";\n    this.ctx.lineCap = \"round\";\n\n    // get a random drawing word from the words array in words.js and set it to state to get re-rendered on the page\n    this.setState({\n      drawingWord: this.getRandomWord(words),\n    });\n  }\n\n  // prepares drawing to start on mousedown\n  startDrawing = (e) => {\n    this.isDrawing = true;\n    // allows user to also draw dots on the page on mousedown events instead of just lines with mousemoves events\n    this.draw(e);\n  };\n\n  // draw lines as mouse moves\n  draw = (e) => {\n    // if the condition is true, then whatever the coordinates are for where the user chooses to place their mouse and begin drawing, form a continous line until the condition is false\n    if (this.isDrawing) {\n      // we want the line to go to where the user's mouse is\n      this.ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n      // will form the lines\n      this.ctx.stroke();\n      // ensures that the line is continious\n      this.ctx.beginPath();\n      this.ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    }\n  };\n\n  // on mouse up, stop the drawing\n  stopDrawing = () => {\n    this.isDrawing = false;\n    // resets the path\n    this.ctx.beginPath();\n  };\n\n  // function that allows user to change the default strokeStyle of black and instead choose a custom color\n  // hexcolor that user has chosen is retrieved from ColorButton.js which is then passed from Buttons.js to Canvas.js\n  changeColor = (selectedColor) => {\n    // user's color selection will not be stored if they pick white or off-white colors\n    if (forbiddenColors.indexOf(selectedColor) === -1) {\n      this.ctx.strokeStyle = selectedColor;\n      // prevents user from spamming database with blank looking drawings\n    } else {\n      this.setState({\n        showModal: true,\n        modalText:\n          \"Please pick another color. Do not be a troll and save a blank drawing.\",\n        modalHeader: \"Troll alert!\",\n      });\n    }\n  };\n\n  // function that allows user to clear the entire canvas on click\n  clearCanvas = () => {\n    this.ctx.clearRect(0, 0, 450, 500);\n  };\n\n  // function that allows user to choose a different drawing word on click\n  // state is set every time this is called\n  nextWord = () => {\n    this.setState({\n      drawingWord: this.getRandomWord(words),\n    });\n  };\n\n  // function that returns a random array item\n  getRandomWord = (array) => {\n    return array[Math.floor(Math.random() * array.length)];\n  };\n\n  // function that saves or rejects the user's drawing\n  saveDrawing = () => {\n    // save canvas image to variable (png format by default, stores the drawing as a base64 string)\n    const drawingUrl = this.canvas.current.toDataURL();\n    // saves the random drawing word from state to another variable\n    const drawingWord = this.state.drawingWord;\n    // create a reference to the database and save it to a variable\n    const dbRef = firebase.database().ref();\n\n    // checks if the canvas is empty or not\n    // if it is empty, then the modal will run prompting the user to draw something before submitting\n    // nothing will get stored to the databse\n    if (this.isCanvasBlank(this.canvas.current)) {\n      // set state to have the modal triggered and allow a re-render to occur\n      this.setState({\n        showModal: true,\n        modalText: \"Please draw something before saving your work to the gallery.\",\n        modalHeader: \"Oops...\",\n      });\n    } else {\n      // if the canvas isn't empty then store an object that contains the drawingUrl and drawingWord properties into the databse\n      dbRef.push({ drawingUrl, drawingWord });\n      // immediately clear the canvas after the information gets stored\n      this.clearCanvas();\n\n      // set state to have the modal triggered and allow a re-render to occur\n      // modal will show user a success message\n      this.setState({\n        showModal: true,\n        modalText: \"Your drawing has been saved to the gallery. Go check it out!\",\n        modalHeader: \"Success!\",\n      });\n    }\n  };\n\n  // returns true if every pixel's uint32 representation is 0 (or \"blank\")\n  // thank you Austin Brunkhorst @ stackoverflow.com for this code (https://stackoverflow.com/questions/17386707/how-to-check-if-a-canvas-is-blank)\n  isCanvasBlank = (canvas) => {\n    const pixelBuffer = new Uint32Array(\n      this.ctx.getImageData(0, 0, canvas.width, canvas.height).data.buffer\n    );\n    return !pixelBuffer.some((color) => color !== 0);\n  };\n\n  render() {\n    return (\n      <main>\n        <section>\n          <h2 className=\"drawItHeading\">\n            Draw It <span aria-hidden=\"true\">✏️</span>\n          </h2>\n          <div className=\"drawItContainer wrapper\">\n            <Buttons\n              colorFn={this.changeColor}\n              clearFn={this.clearCanvas}\n              nextWordFn={this.nextWord}\n              saveFn={this.saveDrawing}\n            />\n\n            <SweetAlert\n              show={this.state.showModal}\n              title={this.state.modalHeader}\n              text={this.state.modalText}\n              onConfirm={() => this.setState({ showModal: false })}\n            />\n\n            <div className=\"canvasAndHowTo\">\n              <h3>{this.state.drawingWord}</h3>\n              <canvas\n                ref={this.canvas}\n                className=\"canvas\"\n                onMouseDown={this.startDrawing}\n                onMouseMove={this.draw}\n                onMouseUp={this.stopDrawing}\n                width={450}\n                height={500}\n              />\n              <HowToPlay />\n            </div>\n          </div>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default Canvas;","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <div className=\"wrapper\">\n        <p>\n          Anna Liang <span aria-hidden=\"true\">&copy;</span> 2020\n        </p>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport Swal from \"sweetalert2\";\n\nclass Guess extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // inital states\n      userInput: \"\",\n      correctGuess: \"\",\n    };\n  }\n\n  // calls setMatchingImgAndWord to match the correct drawing word with the correct drawing image and then update state to trigger a re-render\n  componentDidMount() {\n    this.setMatchingImgAndWord(this.props.drawings);\n  }\n\n  // not called on inital render\n  // new props are received, need to compare the new props to the previous props\n  componentDidUpdate(prevProps) {\n    // in this case, want to compare the previous props' imgId with the new props' imgId\n    if (prevProps.match.params.imgId !== this.props.match.params.imgId) {\n      // if they are not a match then call setMatchingImgAndWord\n      this.setMatchingImgAndWord(this.props.drawings);\n    }\n  }\n\n  checkUserInput = (e) => {\n    e.preventDefault();\n    // this.state.userInput and this.state.correctGuess are stored in new variables so that we may change their values\n    const alteredUserInput = this.state.userInput;\n    const alteredCorrectGuess = this.state.correctGuess;\n\n    // converts alteredUserInput to lowercase and disregards any empty spaces so that it can be compared to alteredCorrectGuess\n    if (alteredUserInput.toLowerCase().replace(/\\s/g, \"\") === alteredCorrectGuess.replace(/\\s/g, \"\")) {\n      // if the user's input matches the correct guess then an alert is fired informing the user they are correct\n      this.guessModal(\"Correct!\", \"You are a guessing master. Great job!\");\n      // clears input after user clicks submit\n      this.setState({\n        userInput: \"\"\n      })\n    } else {\n      // if the user's input does not match then an alert is fired informing the user they are incorrect\n      this.guessModal(\"Wrong!\", \"Sorry that was the incorrect answer. Please guess again.\");\n      // clears input after user clicks submit\n      this.setState({\n        userInput: \"\",\n      });\n    }\n  };\n\n  guessModal = (title, text) => {\n    Swal.fire({\n      title: title,\n      text: text,\n    });\n  }\n\n  // gets what the user has typed from the input form\n  getUserInput = (e) => {\n    this.setState({\n      userInput: e.target.value,\n    });\n  };\n\n  setMatchingImgAndWord = (drawingsArray) => {\n    // passes in the this.props.drawings array and filters through each object in the array to find an id that matches with the id of the drawing that is to be displayed on the page\n    const findCorrectDrawingObj = drawingsArray.filter((drawing) => {\n      return drawing.drawingId === this.props.match.params.imgId;\n    });\n\n    // condition to make sure that we are actually getting something back \n    if (findCorrectDrawingObj.length > 0) {\n      //once the correct object has been found, set state to store the drawing's corresponding drawingWord and drawingUrl\n      this.setState({\n        correctGuess: findCorrectDrawingObj[0].drawingWord,\n        drawingUrl: findCorrectDrawingObj[0].drawingUrl,\n      });\n    }\n  };\n\n  // render happens after a state change and after it receive new props\n  render() {\n    return (\n      <section className=\"guessSection\">\n        <div className=\"wrapper\">\n          <div className=\"guessContainer\">\n            <h2 className=\"guessItHeading\">\n              Guess It <span aria-hidden=\"true\">🤔</span>\n            </h2>\n            <div className=\"guessDrawing\">\n              <span className=\"showText\">\n                <img src={this.state.drawingUrl} alt=\"\" />\n              </span>\n            </div>\n            <p>Type your guess into the input bar below.</p>\n            <form action=\"submit\" onSubmit={this.checkUserInput}>\n              <input\n                type=\"text\"\n                value={this.state.userInput}\n                onChange={this.getUserInput}\n                className=\"guessInput\"\n              />\n              <button type=\"submit\" className=\"guessButton\">\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Guess;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Gallery extends Component {\n  render() {\n    return (\n      <section className=\"gallery\">\n        <div className=\"wrapper\">\n          <h2 className=\"seeItHeading\">\n            See It <span aria-hidden=\"true\">👀</span>\n          </h2>\n          <p>A collection of drawings done by other users around the globe!</p>\n          <p>\n            Marvel at their beauty or click the drawing to play along and try to\n            guess what\n          </p>\n          <p>you think the user was trying to draw.</p>\n          <ul className=\"galleryGrid\">\n            {/* map over each array item in this.props.drawings and return JSX which displays the drawing to the page as well as returns the drawingId which is to be used in the Link component to direct the user to each unique drawing*/}\n            {this.props.drawings.map((drawing) => {\n              return (\n                <li className=\"userDrawing\" key={drawing.drawingId}>\n                  <span className=\"showText\">\n                    <Link to={`/guess/${drawing.drawingId}`}>\n                      <img\n                        src={drawing.drawingUrl}\n                        alt=\"drawn by an anonymous online user\"\n                      />\n                    </Link>\n                  </span>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Gallery;\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport ScrollToTop from \"./components/ScrollToTop\";\nimport Header from \"./components/Header\";\nimport Canvas from \"./components/Canvas\";\nimport Footer from \"./components/Footer\";\nimport Guess from \"./components/Guess\";\nimport Gallery from \"./components/Gallery\";\nimport firebase from \"./firebase\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // inital states\n      drawingsArray: [],\n      randomDrawingObj: undefined,\n    };\n  }\n\n  componentDidMount() {\n    // saving reference to the entire database that was just made\n    const dbRef = firebase.database().ref();\n\n    // listening for any change to the entire database\n    dbRef.on(\"value\", (snapshot) => {\n      // when data changes in the database, do the following:\n      // .val() will return the data in the form of an object from the database\n      const dbData = snapshot.val();\n\n      const drawingsArrayFromDb = [];\n\n      // turning the object from the database into an array\n      for (let key in dbData) {\n        drawingsArrayFromDb.push({\n          drawingWord: dbData[key].drawingWord,\n          drawingUrl: dbData[key].drawingUrl,\n          drawingId: key,\n        });\n      }\n\n      // update state to include the newly converted array\n      this.setState({\n        drawingsArray: drawingsArrayFromDb,\n      });\n\n      // after the data is retrieved from the database, call the function setInitialRandomDrawingObj with drawingsArrayFromDb as the argument\n      this.setInitialRandomDrawingObj(drawingsArrayFromDb);\n    });\n  }\n\n  // function that will take in newDrawingsArray and check whether or not newDrawingsArray has any items in it before state is set\n  // once newDrawingsArray is populated with array items, update the state of randomDrawingObj to include a randomly selected array item (each array item is an object)\n  setInitialRandomDrawingObj = (array) => {\n    if (array.length > 0) {\n      this.setState({\n        randomDrawingObj: this.getRandomArrayItem(this.state.drawingsArray),\n      });\n    }\n  };\n\n  // function that takes in an array and returna a random array item\n  getRandomArrayItem = (array) => {\n    return array[Math.floor(Math.random() * array.length)];\n  };\n\n  // click handler function that gets passed as a prop from App.js to Header.js to Navbar.js\n  // will get called on a click event from the child component, Navbar.js\n  setRandomIdStr = () => {\n    this.setState({\n      // random object from this.state.drawingsArray is retrieved everytime the click happens in the child Navbar.js component and then state gets re-updated on every click\n      randomDrawingObj: this.getRandomArrayItem(this.state.drawingsArray),\n    });\n  };\n\n  render() {\n    // condition that ensures the JSX is only returned when the data from the callback function in dbRef.on() is retrieved so that the initial drawingArrays and randomDrawingObj actually have the information we want in it before they are rendered to the page\n    if (\n      this.state.drawingsArray.length > 0 &&\n      this.state.randomDrawingObj !== undefined\n    ) {\n      return (\n        <Router>\n          <div className=\"App\">\n            <ScrollToTop />\n            <Header\n              randomDrawingObj={this.state.randomDrawingObj}\n              getRandomId={this.setRandomIdStr}\n            />\n            <Route exact path=\"/\" component={Canvas} />\n            <Route\n              path=\"/gallery\"\n              render={(props) => (\n                <Gallery {...props} drawings={this.state.drawingsArray} />\n              )}\n            />\n            <Route\n              path=\"/guess/:imgId\"\n              render={(props) => (\n                <Guess {...props} drawings={this.state.drawingsArray} />\n              )}\n            />\n            <Footer />\n          </div>\n        </Router>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}